import datetime
import json
import jsonschema
import sys
import re

schemaFile:str = '../argspec/arguments.schema.json'

arggenVersion:str = 'v1.0.0'

argHeader:str = 'Argument parser generated by arggen %s at %s' % (arggenVersion, datetime.datetime.now())

def printe(arg:object) -> None:
    print(str(arg), file=sys.stderr)

def wrapDefaultValue(value:str, valueType:str) -> str:
    if valueType == 'string':
        return f'"{value}"'
    elif valueType == 'char':
        return f"'{value}'"
    else:
        return value

# # Setup draft 7 validator to replace defaults
# # Helpfully transposed from 
# # https://stackoverflow.com/questions/41290777/trying-to-make-json-schema-validator-in-python-to-set-default-values
# def extendValidatorToAddDefaults(validator:object) -> object:
#     propertyValidator = validator.VALIDATORS["properties"]

#     def setDefaultValues(val, properties, instance:dict, schema:dict):
#         for property_, subschema in properties.items():
#             if "default" in subschema and not isinstance(instance, list):
#                 instance.setdefault(property_, subschema["default"])

#         for error in setDefaultValues(val, properties, instance, schema):
#             yield error

#     return jsonschema.validators.extend(validator, {"properties": setDefaultValues})

# jsonschema.FillDefaultValidatingDraft7Validator = extendValidatorToAddDefaults(jsonschema.Draft7Validator)

def toPython(spec:dict) -> int:
    printe('Python is not yet supported!')
    return -1

def standardise(spec:dict, schema:dict) -> dict:
    # Precondition: the spec has been validated against the schema
    if 'program' not in spec:
        spec['program'] = schema['program']['default']
    if 'args' not in spec:
        spec['args'] = []
    else:
        for arg in spec['args']:
            if 'help' not in arg:
                arg['help'] = ''

    return spec

def main(args:[str]) -> int:
    spec:dict
    try:
        spec = json.load(sys.stdin)
    except json.decoder.JSONDecodeError as jsonde:
        printe(str(jsonde) + f' while handling json from stdin')
        return -1

    schema:dict
    with open(schemaFile, 'r+') as i:
        try:
            schema = json.load(i)
        except json.decoder.JSONDecodeError as jsonde:
            printe(str(jsonde) + f' while handling schema in "{schemaFile}"')
            return -1

    try:
        jsonschema.validate(instance=spec, schema=schema)
    except jsonschema.exceptions.ValidationError as ve:
        printe(f'Input specification did not match the schema (using schema: "{schemaFile}"')
        printe(str(ve))
        return -1

    spec = standardise(spec, schema)

    return toPython(spec)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))