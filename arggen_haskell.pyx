import datetime
import json
import jsonschema
import sys
import re

schemaFile:str = '../argspec/arguments.schema.json'

arggenVersion:str = 'v1.0.0'

argHeader:str = 'Argument parser generated by arggen %s at %s' % (arggenVersion, datetime.datetime.now())

def printe(arg:object) -> None:
    print(str(arg), file=sys.stderr)

def wrapDefaultValue(value:str, valueType:str) -> str:
    if valueType == 'string':
        return f'"{value}"'
    elif valueType == 'char':
        return f"'{value}'"
    else:
        return value

# # Setup draft 7 validator to replace defaults
# # Helpfully transposed from 
# # https://stackoverflow.com/questions/41290777/trying-to-make-json-schema-validator-in-python-to-set-default-values
# def extendValidatorToAddDefaults(validator:object) -> object:
#     propertyValidator = validator.VALIDATORS["properties"]

#     def setDefaultValues(val, properties, instance:dict, schema:dict):
#         for property_, subschema in properties.items():
#             if "default" in subschema and not isinstance(instance, list):
#                 instance.setdefault(property_, subschema["default"])

#         for error in setDefaultValues(val, properties, instance, schema):
#             yield error

#     return jsonschema.validators.extend(validator, {"properties": setDefaultValues})

# jsonschema.FillDefaultValidatingDraft7Validator = extendValidatorToAddDefaults(jsonschema.Draft7Validator)

def toHaskell(spec:dict) -> int:
    typeMap:dict = {
        'string' : 'String',
        'char' : 'Char',
        'int' : 'Integer',
        'flag' : 'Bool',
        'help': 'Bool'
    }

    imports:str = 'module Args where\nimport System.Environment\nimport Data.Char\nimport Data.List\n\nnewtype Error = Error String'

    argSpecSetup:str = (
    'parseArgv :: IO Args\n'
    'parseArgv = do \n'
    '    args <- getArgs \n'
    '    return $ parseArgs\' args\n'
    '\n'
    'parseArgs :: [String] -> Args\n'
    'parseArgs args = parseArgs\' args\n'
    '\n'
    'makeChar :: String -> Char\n'
    'makeChar [] = error "Characters should be non-empty"\n'
    'makeChar xs\n'
    '    | length xs == 0 = error "Please give a character"\n'
    '    | length xs >= 2 = error "Too many characters given, expected one here"\n'
    '    | otherwise = xs!!0\n'
    )

    matchLines:[str] = ['parseArgs\' :: [String] -> Args']
    validatorLines:[str] = ['validArg :: (String,String) -> Bool']
    argTypes:str = ''
    defaultArgs:[str] = []

    for arg in spec['args']:
        # if arg['optional']:
        shortName:str = arg['short']
        longName:str = arg['long']
        dest:str = arg['dest']
        argtype:str = typeMap[arg['type']]
        default = arg['default']

        if not isValidDest(dest):
            printe(f'Invalid destination: "{dest}"')
            return 1

        getArgString:str
        argGrabber:str
        if argtype == 'Integer':
            argGrabber = ':x'
            getArgString = f'read x :: Integer'
        elif argtype == 'Char':
            argGrabber = ':c'
            getArgString = f'makeChar c'
        elif argtype == 'Bool':
            argGrabber = ''
            getArgString = 'True'
        else:
            argGrabber = ':u'
            getArgString = 'u'
        # if argtype == 'String':
        # = f'read x :: {argtype} ' 
        #  argtype != 'Char' else 'x'


        matchLines.append(f'parseArgs\' ("{shortName}"{argGrabber}:args) = (parseArgs\' args) {{ {dest} = {getArgString} }}')
        matchLines.append(f'parseArgs\' ("{longName}"{argGrabber}:args) = (parseArgs\' args) {{ {dest} = {getArgString} }}')
        validatorLines.append(f'validArg ("{dest}",s) = isNum s')

        formattedDefault = wrapDefaultValue(default, arg['type'])
        defaultArgs.append(f'{dest} = {formattedDefault}')
        argTypes += (', ' if argTypes != '' else '') + f'{dest} :: {argtype}'
        # else:
        #     matchLines.append(f'parseArgs\' (a:as) = parseArgs\' as ++ [("{dest}",a)]')
        #     validatorLines.append(f'validArg ("{dest}",s) = isFileName s')
            

    matchLines.append('parseArgs\' [] = defaultArgs\n')
    matchLines.append('parseArgs\' args = error $ "Could not parse rest of arguments: " ++ (intercalate " " args)')
    validatorLines.append('validArg _ = True')
    argTypes = f'data Args = Args {{ {argTypes} }}\n    deriving Show'
    defaultArgsString:str = ', '.join(defaultArgs)
    defaultArgsString = f'defaultArgs :: Args\ndefaultArgs = Args {{ {defaultArgsString} }}'

    print('-- %s' % argHeader, end='\n\n')
    print(imports)
    print(argTypes, end='\n\n')
    print(defaultArgsString)
    print(argSpecSetup)
    print('\n'.join(matchLines), end='\n\n')
    # print('\n'.join(validatorLines))

def standardise(spec:dict, schema:dict) -> dict:
    # Precondition: the spec has been validated against the schema
    if 'program' not in spec:
        spec['program'] = schema['program']['default']
    if 'args' not in spec:
        spec['args'] = []
    else:
        for arg in spec['args']:
            if 'help' not in arg:
                arg['help'] = ''

    return spec

def main(args:[str]) -> int:
    spec:dict
    try:
        spec = json.load(sys.stdin)
    except json.decoder.JSONDecodeError as jsonde:
        printe(str(jsonde) + f' while handling json from stdin')
        return -1

    schema:dict
    with open(schemaFile, 'r+') as i:
        try:
            schema = json.load(i)
        except json.decoder.JSONDecodeError as jsonde:
            printe(str(jsonde) + f' while handling schema in "{schemaFile}"')
            return -1

    try:
        jsonschema.validate(instance=spec, schema=schema)
    except jsonschema.exceptions.ValidationError as ve:
        printe(f'Input specification did not match the schema (using schema: "{schemaFile}"')
        printe(str(ve))
        return -1

    spec = standardise(spec, schema)
    return toHaskell(spec)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))